import React from "react";

const cellSize = 30;
const spacing = 5;

const characterMap = {
    A: [[0, 1, 0],[1, 0, 1],[1, 1, 1],[1, 0, 1],[1, 0, 1]],
    B: [[1, 1, 0],[1, 0, 1],[1, 1, 0],[1, 0, 1],[1, 1, 0]],
    C: [[0, 1, 1],[1, 0, 0],[1, 0, 0],[1, 0, 0],[0, 1, 1]],
    D: [[1, 1, 0],[1, 0, 1],[1, 0, 1],[1, 0, 1],[1, 1, 0]],
    E: [[0, 1, 1],[1, 0, 0],[1, 1, 0],[1, 0, 0],[0, 1, 1]],
    F: [[0, 1, 1],[1, 0, 0],[1, 1, 0],[1, 0, 0],[1, 0, 0]],
    G: [[0, 1, 1],[1, 0, 0],[1, 0, 1],[1, 0, 1],[0, 1, 1]],
    H: [[1, 0, 1],[1, 0, 1],[1, 1, 1],[1, 0, 1],[1, 0, 1]],
    I: [[0, 1, 0],[0, 1, 0],[0, 1, 0],[0, 1, 0],[0, 1, 0]],
    J: [[0, 1, 1],[0, 0, 1],[0, 0, 1],[1, 0, 1],[0, 1, 0]],
    K: [[1, 0, 1],[1, 0, 1],[1, 1, 0],[1, 0, 1],[1, 0, 1]],
    L: [[1, 0, 0],[1, 0, 0],[1, 0, 0],[1, 0, 1],[1, 1, 1]],
    M: [[1, 0, 1],[1, 1, 1],[1, 0, 1],[1, 0, 1],[1, 0, 1]],
    N: [[1, 0, 1],[1, 0, 1],[0, 1, 1],[1, 1, 0],[1, 0, 1]],
    O: [[0, 1, 0],[1, 0, 1],[1, 0, 1],[1, 0, 1],[0, 1, 0]],
    P: [[1, 1, 0],[1, 0, 1],[1, 1, 0],[1, 0, 0],[1, 0, 0]],
    Q: [[0, 1, 0],[1, 0, 1],[1, 0, 1],[1, 0, 1],[0, 1, 1]],
    R: [[1, 1, 0],[1, 0, 1],[1, 1, 0],[1, 0, 1],[1, 0, 1]],
    S: [[0, 1, 1],[1, 0, 0],[0, 1, 0],[0, 0, 1],[1, 1, 0]],
    T: [[1, 1, 1],[0, 1, 0],[0, 1, 0],[0, 1, 0],[0, 1, 0]],
    U: [[1, 0, 1],[1, 0, 1],[1, 0, 1],[1, 0, 1],[1, 1, 1]],
    V: [[1, 0, 1],[1, 0, 1],[1, 0, 1],[1, 0, 1],[0, 1, 0]],
    W: [[1, 0, 1],[1, 0, 1],[1, 0, 1],[1, 1, 1],[1, 0, 1]],
    X: [[1, 0, 1],[1, 0, 1],[0, 1, 0],[1, 0, 1],[1, 0, 1]],
    Y: [[1, 0, 1],[1, 0, 1],[0, 1, 0],[0, 1, 0],[0, 1, 0]],
    Z: [[1, 1, 0],[0, 0, 1],[0, 1, 0],[1, 0, 0],[0, 1, 1]],
    1: [[1, 1, 0],[0, 1, 0],[0, 1, 0],[0, 1, 0],[0, 1, 0]],
    2: [[1, 1, 1],[0, 0, 1],[1, 1, 1],[1, 0, 0],[1, 1, 1]],
    3: [[1, 1, 1],[0, 0, 1],[0, 1, 1],[0, 0, 1],[1, 1, 1]],
    4: [[1, 0, 1],[1, 0, 1],[1, 1, 1],[0, 0, 1],[0, 0, 1]],
    5: [[1, 1, 1],[1, 0, 0],[1, 1, 1],[0, 0, 1],[1, 1, 1]],
    6: [[1, 1, 1],[1, 0, 0],[1, 1, 1],[1, 0, 1],[1, 1, 1]],
    7: [[1, 1, 1],[1, 0, 1],[0, 0, 1],[0, 0, 1],[0, 0, 1]],
    8: [[1, 1, 1],[1, 0, 1],[1, 1, 1],[1, 0, 1],[1, 1, 1]],
    9: [[1, 1, 1],[1, 0, 1],[1, 1, 1],[0, 0, 1],[1, 1, 1]],
    0: [[1, 1, 1],[1, 0, 1],[1, 0, 1],[1, 0, 1],[1, 1, 1]],
    "?": [[1, 1, 0],[0, 0, 1],[0, 1, 1],[0, 0, 0],[0, 1, 0]],
    "(": [[0, 0, 1],[0, 1, 0],[0, 1, 0],[0, 1, 0],[0, 0, 1]],
    ")": [[1, 0, 0],[0, 1, 0],[0, 1, 0],[0, 1, 0],[1, 0, 0]],
    "/": [[0, 0, 1],[0, 1, 1],[0, 1, 0],[1, 1, 0],[1, 0, 0]],
    "!": [[0, 1, 0],[0, 1, 0],[0, 1, 0],[0, 0, 0],[0, 1, 0]],
    ":": [[0, 0, 0],[0, 1, 0],[0, 0, 0],[0, 1, 0],[0, 0, 0]],
    ",": [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 1, 0],[1, 1, 0]],
    "-": [[0, 0, 0],[0, 0, 0],[1, 1, 1],[0, 0, 0],[0, 0, 0]],
    ".": [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 1, 0]],
    " ": [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]]
};

const generateRandomChar = () => {
  return Array(5).fill().map(() => (
    Array(3).fill().map(() => Math.round(Math.random()))
  ));
};

const AnimatedText = ({ text }) => {
  const renderCharacters = () => {
    const elements = [];
    const charsPerLine = Math.floor(window.innerWidth / ((3 * cellSize) + spacing * 3));
    const lines = Math.ceil(text.length / charsPerLine);

    text.split("").forEach((char, idx) => {
      const pattern = characterMap[char.toUpperCase()] || generateRandomChar();

      const row = Math.floor(idx / charsPerLine);
      const col = idx % charsPerLine;
      const xOffset = col * (3 * (cellSize + spacing) + spacing);
      const yOffset = row * (5 * (cellSize + spacing) + spacing);

      pattern.forEach((line, y) => {
        line.forEach((val, x) => {
          if (val) {
            elements.push(
              <div
                key={`${idx}-${x}-${y}`}
                style={{
                  position: "absolute",
                  top: yOffset + y * (cellSize + spacing),
                  left: xOffset + x * (cellSize + spacing),
                  width: cellSize,
                  height: cellSize,
                  backgroundColor: "white",
                  animation: "spin 2s linear infinite",
                }}
              />
            );
          }
        });
      });
    });

    return elements;
  };

  return (
    <div
      style={{
        backgroundColor: "black",
        width: "100vw",
        height: "100vh",
        position: "relative",
      }}
    >
      {renderCharacters()}
    </div>
  );
};

export default AnimatedText;
